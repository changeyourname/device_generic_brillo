#!/bin/sh

# To quit out of Qemu do ctrl-a x

# ===== Building a runnable image =====
# Start with a checkout of mnc-brillo-dev
#   cd <root of android tree>
#   source build/envsetup.sh
#   lunch brillo_emulator_arm-eng
#   make -j32

${ANDROID_BUILD_TOP}/prebuilts/android-emulator/linux-x86_64/qemu/linux-x86_64/qemu-system-aarch64 \
	-M vexpress-a9 \
	-m 1024M \
	-kernel "${ANDROID_BUILD_TOP}/device/generic/brillo/brillo-emulator-arm/kernels/android-3.14/zImage" \
	-dtb "${ANDROID_BUILD_TOP}/device/generic/brillo/brillo-emulator-arm/kernels/mainline/vexpress-v2p-ca9.dtb" \
	-append "console=ttyAMA0 root=/dev/ram androidboot.hardware=brillo qemu=1 androidboot.selinux=permissive" \
	-nographic \
	-initrd "${ANDROID_PRODUCT_OUT}/ramdisk.img" \
	-device virtio-scsi-device,id=scsi \
	-device scsi-hd,drive=system \
	-drive file="${ANDROID_PRODUCT_OUT}/system.img,if=none,id=system,format=raw" \
	-device scsi-hd,drive=userdata \
	-drive file="${ANDROID_PRODUCT_OUT}/userdata.img,if=none,id=userdata,format=raw" \
	-redir tcp:5555::5555


# A note on init:
#
#   Android provides a single init.rc which is installed to every android
#   device.  This init.rc imports a device specific init file for custom device
#   stuff (ours is init.brillo.rc).  The main init.rc defines loads of daemons
#   and stuff, mostly which we dont have. We need a way to customise this for
#   brillo.  We could build a better init.rc at compile time based on some
#   build config.  Or we could use our init.brillo.rc to disable services.
